// --------------------------------------------------------------------
// Setup for OpenTelemetry Tracing
require('dotenv').config()
const opentelemetry = require('@opentelemetry/sdk-node');
const { SimpleSpanProcessor, ConsoleSpanExporter } = require('@opentelemetry/sdk-trace-base');
const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');
const { Resource } = require('@opentelemetry/resources');
const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');
const { registerInstrumentations } = require('@opentelemetry/instrumentation');

// --------------------------------------------------------------------
// Setup for OpenTelemetry Metrics
const { MeterProvider, ConsoleMetricExporter } = require('@opentelemetry/sdk-metrics-base');
const { OTLPMetricExporter } = require('@opentelemetry/exporter-metrics-otlp-grpc');

// --------------------------------------------------------------------
// SDK Class
class OpenTelemetrySDK {
  constructor() {
    this.counters = {};
    this.sdk = {};
  }
  // NOTE: NodeJS Auto Instrumentation for tracing currently always enabled
  // serviceName: name of the service
  // outputType: `console` for debug/dev, `dev`, `production`
  async initialize(serviceName, outputType, optInterval) {
    
    const validTraceTypes = ['console', 'dev', 'production'];
    if (validTraceTypes.indexOf(outputType) === -1) {
      throw new Error(
        `Invalid output type - Options: console, dev, production | Got: ${outputType}`
      );
    }
    const urls = {
      dev: 'http://localhost:4318/v1/traces', // DEV_URL
      prod: 'NOT_YET_IMPLEMENTED'
    };

    // --------------------------------------------------------------------
    // Metrics Setup
    const metricExporters = () => {
      switch(outputType) {
        case 'dev':
          return new OTLPMetricExporter({
            url: urls['dev']
          });
          break;
        case 'production':
          return new OTLPMetricExporter({
            url: urls['prod']
          });
          break;
        case 'console':
        default:
          return new ConsoleMetricExporter();
      }
    };

    this.meter = new MeterProvider({
      exporter: metricExporters(), 
      interval: optInterval || 10000,
    }).getMeter(`${serviceName}-meter`);

    // --------------------------------------------------------------------
    // Traces Setup (Default NodeJS Traces Enabled)
    const traceExporters = () => {
      switch(outputType) {
        case 'dev':
          return new OTLPTraceExporter({
            url: urls['dev']
          });
        case 'production':
          return new OTLPTraceExporter({
            url: urls['prod']
          });
        case 'console':
        default:
          return new ConsoleSpanExporter();
      }
    };

    const sdk = new opentelemetry.NodeSDK({
      traceExporter: traceExporters(),
      instrumentations: [getNodeAutoInstrumentations()],
      resource: new Resource({
        [SemanticResourceAttributes.SERVICE_NAME]: serviceName,
      }),
    });

    this.sdk = sdk;
  };

  createCounter(counterName) {
    this.counters[counterName] = this.meter.createCounter(counterName);
  }

  async startTracing() {
    return this.sdk.start();
  }
}

module.exports = new OpenTelemetrySDK();
